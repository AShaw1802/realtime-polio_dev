import yaml 
from pytools.persistent_dict import PersistentDict

##### Configuration #####

config["basecalled_path"] = config["basecalled_path"].rstrip("/") #.replace(" ","\ ")

if config.get("annotated_path"):
    config["annotated_path"] = config["annotated_path"].rstrip("/")
else:
    config["annotated_path"] = "annotations"

if config.get("output_path"):
    config["output_path"] = config["output_path"].rstrip("/")
else:
    config["output_path"] = "binned"

samples = config["samples"]
barcodes = []
for i in config["samples"]:
    barcodes.append(config["samples"][i])
print(samples)
print(barcodes)
##### Workflow #####


rule all:
    input:
        expand(config["output_path"] + "/consensus_sequences/{barcode}.fasta",barcode = barcodes),
        expand(config["output_path"] + "/reports/{barcode}.report.md",barcode = barcodes)

rule binlorry:
    input:
    params:
        path_to_reads = config["basecalled_path"],
        report_dir = config["annotated_path"],
        outdir = config["output_path"],
        min_read_length = config["min_read_length"],
        max_read_length = config["max_read_length"],
        # barcodes = barcodes,
        # sample_name = sample_name,
        output_prefix= config["output_path"] + "/binned"
    output:
        expand(config["output_path"] + "/binned_{barcode}.fastq",barcode = barcodes),
        expand(config["output_path"] + "/binned_{barcode}.csv",barcode = barcodes)
    shell:
        "binlorry -i {params.path_to_reads:q} "
        "-t {params.report_dir:q} "
        "-o {params.output_prefix:q} "
        "-n {params.min_read_length} "
        "-x {params.max_read_length} "
        "-v 0 "
        "--bin-by barcode "
        "--out-report"

rule run_for_each_sample:
    input:
        config=workflow.current_basedir+"/../analysis_master/config.yaml",
        reads=config["output_path"] + "/binned_{barcode}.fastq",
        report=config["output_path"] + "/binned_{barcode}.csv"
    params:
        barcode = "{barcode}",
        path = workflow.current_basedir
    output:
        config["output_path"] + "/consensus_sequences/{barcode}.fasta",
        config["output_path"] + "/reports/{barcode}.report.md"
    run:
        barcode = params.barcode
        config["basecalled_path"] = config["basecalled_path"].replace(" ","\ ")
        for i in config["samples"]:
            if params.barcode == config["samples"][i]:
                sample = i

                print("Passing {} for {} into analysis pipeline.".format(sample, barcode))
                config["sample"]= sample
                config["barcodes"]= barcode
                print(config["basecalled_path"], config["annotated_path"], config["output_path"], config["sample"], config["barcodes"])
                shell("snakemake --nolock --snakefile {params.path}/../analysis_master/Snakefile "
                            "--configfile {input.config} "
                            "--config "
                            "basecalled_path={config[basecalled_path]} "
                            "annotated_path={config[annotated_path]} "
                            "output_path={config[output_path]} "
                            # "sample_name={config[sample]} "
                            "references_file={params.path}/../../references.fasta "
                            "barcodes={config[barcodes]}")
